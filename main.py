import telebot
from threading import Thread

import re
import sqlite3

import const

from content_message_commands import reg, list_
from content_message_text import atdate, athour, inhour, inminute, delet
from content_message_other import sticker, voice

from oldbasedel import old_base_del
from monitoring import monitoring   

from log.logger import *

bot = telebot.TeleBot(const.TOKEN)


@bot.message_handler(commands=["start"])
def command_start(message):
    bot.send_message(message.chat.id, const.START, parse_mode="Markdown")

    with sqlite3.connect('base.db') as db:
        cur = db.cursor()

        cur.execute(f"""SELECT chatid FROM {const.BASE}""")
        chatid = [i[0] for i in cur.fetchall()]

        if message.chat.id not in chatid:
            msg = bot.send_message(message.chat.id, const.TIMEZONETEXT, parse_mode="Markdown")
            bot.register_next_step_handler(msg, tz)
        
def tz(message):
    try:
        timezone = int(message.text)
        if 12 >= timezone >= -12:
            Thread(target=reg, args = (message, timezone)).start()
            bot.send_message(message.chat.id, '‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
        else:
            msg = bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...')
            bot.register_next_step_handler(msg, tz)
            return
    except:
        msg = bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...')
        bot.register_next_step_handler(msg, tz)


@bot.message_handler(commands=["time"])
def command_time(message):
    msg = bot.send_message(message.chat.id, const.TIMEZONETEXT)
    bot.register_next_step_handler(msg, changetz)

def changetz(message):
    try:
        timezone = int(message.text)
        if 12 >= timezone >= -12:
            with sqlite3.connect('base.db') as db:
                db.cursor().execute(f"""UPDATE {const.BASE} SET timezone = {timezone} WHERE chatid = {message.chat.id}""")
                bot.send_message(message.chat.id, '‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
                logging.info(f'{message.chat.id:14} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ–Ω—è–ª timezone –Ω–∞ {timezone}')
        else:
            msg = bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...')
            bot.register_next_step_handler(msg, changetz)
    except:
        msg = bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...')
        bot.register_next_step_handler(msg, changetz)


@bot.message_handler(commands=["sticker"])
def command_sticker(message):
    bot.send_message(message.chat.id, const.STICKERTEXT)
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIKuV9DzidsQQwkrLf8uVJCwyfaTqhzAAIBAAP00Q8Y2Vj_yRX8h3IbBA')
    logging.info(f'{message.chat.id:14} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª /sticker')


@bot.message_handler(commands=["callback"])
def command_callback(message):
    msg = bot.send_message(message.chat.id, const.CALLBACKTEXT, parse_mode="Markdown")
    bot.register_next_step_handler(msg, callback)

def callback(message):
    bot.send_message(const.ADMINID, f'@{message.from_user.username}\nChatId - {message.chat.id}\n\n{message.text}', parse_mode="Markdown")
    bot.send_message(message.chat.id, '–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ üëå', parse_mode="Markdown")
    logging.info(f'{message.chat.id:14} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª callback —Å —Ç–µ–∫—Å—Ç–æ–º - {message.text}')


@bot.message_handler(commands=["commands"])
def commands(message):
    bot.send_message(message.chat.id, const.COMMANDS, parse_mode="Markdown")
    logging.info(f'{message.chat.id:14} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª /commands')


@bot.message_handler(commands=["list"])
def command_new(message):
    list_(message, bot)


@bot.message_handler(content_types=["sticker"])
def mainsticker(message):
    logging.info(f'{message.chat.id:14} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä')
    sticker(message, bot)
    main(message)
    

@bot.message_handler(content_types=["voice"])
def mainvoice(message):
    logging.info(f'{message.chat.id:14} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    voice(message, bot)
    main(message)


@bot.message_handler(content_types=["text"])
def main(message):
    logging.debug(f'{message.chat.id:14} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª - {message.text}')
    
    if re.search(r'(\d{1,2})[.|:|/](\d{1,2})[.|:|/](\d{4}|\d{2})\s+(–≤\s*)?(\d{1,2})[.|:|/]?(\d{0,2})\s*(.*)', message.text, re.IGNORECASE):
        logging.info(f'{message.chat.id:14} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª - {message.text}')
        Thread(target=atdate, args=(message, bot)).start()
    
    elif re.search(r'(–≤)\s+(\d{1,2})([.|:|/]?)(\d{0,2})\s*(.*)', message.text, re.IGNORECASE):
        logging.info(f'{message.chat.id:14} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª - {message.text}')
        Thread(target=athour, args=(message, bot)).start()

    elif re.search(r'(—á–µ—Ä–µ–∑)\s+(\d+)\s+(–º–∏–Ω—É—Ç[—É—ã]?)\s*(.*)', message.text, re.IGNORECASE):
        logging.info(f'{message.chat.id:14} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª - {message.text}')
        Thread(target=inminute, args=(message, bot)).start()
            
    elif re.search(r'(—á–µ—Ä–µ–∑)\s+(\d+)\s+(—á–∞—Å[–∞–æ]?[–≤]?)\s*(.*)', message.text, re.IGNORECASE):
        logging.info(f'{message.chat.id:14} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª - {message.text}')
        Thread(target=inhour, args=(message, bot)).start()
        
    elif re.search(r'—É–¥–∞–ª–∏—Ç—å.?\d+', message.text, re.IGNORECASE):
        Thread(target=delet, args=(message, bot)).start()

    else:
        if message.chat.id > 0 and message.text != 'Sticker.py/Message.text/None':
            bot.send_message(message.chat.id, const.NOT_UNDERSTAND)


if __name__ == '__main__':
    const.push(bot)                     # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    old_base_del()                      # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    Thread(target=monitoring, args=(bot,)).start()   # –ó–∞–ø—É—Å–∫ 2-–æ–≥–æ –ø–æ—Ç–æ–∫–∞ - —Ñ—É–Ω–∫—Ü–∏—è monitoring –∏–∑ monitoring.py
    logging.info(f'{"":14} | –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π')
    bot.infinity_polling()
