import telebot
import sqlite3

import speech_recognition as sr
from requests import get
from subprocess import run

from const import BASE, TABLE, NOT_PREMIUM, TOKEN, APPID


def push(bot):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    '''
    
    push = ""
    if push:
        with sqlite3.connect("base.db") as db:
            cur = db.cursor()
            cur.execute(f"""SELECT chatid FROM {TABLE}""")
            for users in cur.fetchall():
                try:
                    bot.send_message(users[0], push, parse_mode="Markdown")
                    logging.info(f"{users[0]:14} | –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏—à–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ")
                except:
                    pass


def sticker(message, bot):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π - —Å—Ç–∏–∫–µ—Ä–æ–≤
    '''

    stickerid = message.json['sticker']['thumb']['file_unique_id']       # –•—Ä–∞–Ω–∏—Ç ID —Å—Ç–∏–∫–µ—Ä–∞

    with sqlite3.connect(BASE) as db:
        cur = db.cursor()
        cur.execute(f"""SELECT premium FROM {TABLE} WHERE chatid = {message.chat.id}""")

        if cur.fetchone()[0] != 'Yes':      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç–∞.
            message.text = "Sticker.py/Message.text/None"
            bot.send_sticker(message.chat.id, 'CAACAgUAAxkBAAIBtF8W4mnS44I1futOLOabjzGI5BuJAAL_AANxffwUdic7ErtbrcEaBA')
            bot.send_message(message.chat.id, NOT_PREMIUM)
            return

        cur.execute(u"""SELECT * FROM stickers""")
        
        for i in cur.fetchall():
            if i[0] != '*' and i[0] != message.chat.id:
                message.text = "Sticker.py/Message.text/None"
                continue
                
            if i[1] != stickerid:
                message.text = "Sticker.py/Message.text/None"
                continue

            message.text = i[2]
            return     


def voice(message, bot):
    '''
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –°–∫–∞—á–∏–≤–∞–µ—Ç, –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ—Ç –≤ wav
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
    –ü–µ—Ä–µ–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é main –∏–∑ main.py
    '''
    
    file_info = bot.get_file(message.voice.file_id)
    voice_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ
    file = get(voice_url)  # –°–∫–∞—á–∏–≤–∞–µ–º

    with open(f"voice/{message.chat.id}/file.oga", "wb") as f:
        f.write(file.content)  # –¢—É—Ç —Ç–æ–∂–µ —Å–∫–∞—á–∏–≤–∞–µ–º

    file_oga = f"voice/{message.chat.id}/file.oga"
    file_wav = f"voice/{message.chat.id}/file.wav"

    process = run(["ffmpeg", "-y", "-i", file_oga, file_wav])  # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    with sr.AudioFile(file_wav) as source:
        recog = sr.Recognizer()
        audio = recog.record(source, duration=5)    # duration - —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —à—É–º–∞

    try:
        message.text = recog.recognize_google(audio, language="ru-RU").lower()
        if message.chat.id > 0:
            bot.send_message(message.chat.id, f"üó£ –í—ã —Å–∫–∞–∑–∞–ª–∏: {message.text.capitalize()}", parse_mode="Markdown")
    except:
        message.text = "None"


def weather(message, bot):
    with sqlite3.connect(BASE) as db:
        cur = db.cursor()
        cur.execute(f"""SELECT lon, lat FROM {TABLE} WHERE chatid = {message.chat.id}""")

        geo = cur.fetchall()[0]

        res = get("http://api.openweathermap.org/data/2.5/weather",
                        params={'lat': geo[1], 'lon': geo[0], 'units': 'metric', 'lang': 'ru', 'APPID': APPID}).json()
        
        bot.send_message(message.chat.id, res['main']['temp'])
        
